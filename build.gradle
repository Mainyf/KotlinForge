import net.minecraftforge.gradle.delayed.DelayedFile
import net.minecraftforge.gradle.tasks.user.SourceCopyTask

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.0.5-2'
    }
}

apply plugin: 'forge'
apply plugin: 'kotlin'

project.ext {
    group = "io.github.mainyf"
    modName = "Mod Name"
    modVersion = "1.0"
    author = "Mainyf"
    description = ""
    javaVersuon = "1.8"
    encoding = "UTF-8"
    kotlinSrcDirs = "src/main/kotlin"
    javaSrcDirs = "src/main/java"
}

task sourceMainKotlin(type: SourceCopyTask) {
    source = sourceSets.main.kotlin
    output = new DelayedFile(project.file("build/src/kotlin"))
    replace(getSourceCodeVariable())
}

compileKotlin {
    dependsOn(sourceMainKotlin)
    setSource(project.file("build/src/kotlin"))
    def path = project.file("build/src/kotlin").toPath()
    include {
        if(it instanceof FileTreeElement) {
            return ((FileTreeElement) it).getFile().toPath().startsWith(path)
        }
        return it
    }
}

def resourceDir = "src/main/resources"
def modId = project.modName.replace(" ", "").toLowerCase()
def atFilePath = "${resourceDir}/${modId}_at.cfg"

version = project.modVersion
group = project.group
archivesBaseName = modId

tasks.withType(Jar) {
    compileJava.options.encoding = 'UTF-8'
    compileJava.options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

sourceCompatibility = targetCompatibility = project.javaVersuon
compileJava {
    sourceCompatibility = targetCompatibility = project.javaVersuon
}

minecraft {
    version = "1.7.10-10.13.4.1558-1.7.10"
    runDir = "eclipse"
}

configurations {
    embed
    compile.extendsFrom(embed)
}

dependencies {
    embed 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:+'
    compile 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
}

jar {
    if (project.file(atFilePath).exists()) {
        println("access transform exists, include to manifest file.")
        manifest {
            attributes 'FMLAT': atFilePath
        }
    }
    from configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
}

sourceSets {
    main.kotlin.srcDirs += project.kotlinSrcDirs
    main.java.srcDirs += project.javaSrcDirs
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand getVariable()
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

Map<String, Object> getSourceCodeVariable() {
    def variable = getVariable()
    def result = new HashMap<String, Object>()
    for (Map.Entry<String, Object> entry : variable) {
        result.put('@' + entry.key.toUpperCase() + '@', entry.value)
    }
    return result
}

Map<String, Object> getVariable() {
    return [
            'version'    : project.modVersion,
            'mcversion'  : project.minecraft.version,
            'author'     : project.author,
            'description': project.description,
            'modid'      : project.modName.replace(" ", "").toLowerCase(),
            'name'       : project.modName
    ]
}