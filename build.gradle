buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.0.5-2'
        classpath 'org.jetbrains:annotations:13.0'
    }
}

apply plugin: 'forge'
apply plugin: 'kotlin'

project.ext {
    group = "io.github.mainyf"
    modName = "Mod Name"
    version = "1.0"
    author = "Mainyf"
    description = ""
    javaVersuon = "1.8"
    encoding = "UTF-8"
    kotlinSrcDirs = "src/main/kotlin"
    javaSrcDirs = "src/main/java"
}

def resourceDir = "src/main/resources"
def modId = project.modName.replace(" ", "").toLowerCase()
def atFilePath = "${resourceDir}/${modId}_at.cfg"

version = project.version
group = project.group
archivesBaseName = modId

tasks.withType(Jar) {
    compileJava.options.encoding = project.encoding
    compileJava.options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

sourceCompatibility = targetCompatibility = project.javaVersuon
compileJava {
    sourceCompatibility = targetCompatibility = project.javaVersuon
}

minecraft {
    version = "1.7.10-10.13.4.1558-1.7.10"
    runDir = "eclipse"
    mappings = "snapshot_20140925"
}

configurations {
    embed
    compile.extendsFrom(embed)
}

dependencies {
    embed 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.0'
    compile 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.0.5-2'
}

jar {
    if (project.file(atFilePath).exists()) {
        println("access transform exists, include to manifest file.")
        manifest {
            attributes 'FMLAT': atFilePath
        }
    }
    from configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
}

sourceSets {
    main.kotlin.srcDirs += project.kotlinSrcDirs
    main.java.srcDirs += project.javaSrcDirs
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version, 'author': project.author, 'description': project.description, 'modid': modId, 'name': project.modName
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
